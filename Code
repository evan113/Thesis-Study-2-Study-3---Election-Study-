---
title: "STUDY 3 - ELECTION STUDY"
author: "Anonymous"
date: "2023-07-31"
output: html_document
---
## Load packages
```{r}
library(tidyverse)
library(httr)
library(haven)
library(ggplot2)
library(ggpubr)
library(PerformanceAnalytics)
library(psych)
library(powRICLPM)
```

## Power analysis for path analysis (3 groups)
## Calculating DF using df = m*(m+1) / 2 - 2*m - X * (X - 1)/2 - g - b for different portions of model
## fluctuate between 16 - 44
## Preacher, K. J., & Coffman, D. L. (2006, May). Computing power and minimum sample size for RMSEA
```{r}
#Computation of minimum sample size for test of fit

rmsea0 <- 0.02 #null hypothesized RMSEA
rmseaa <- 0.08 #alternative hypothesized RMSEA
d <- 16 #degrees of freedom
alpha <- 0.05 #alpha level
desired <- 0.8 #desired power

#initialize values
pow <- 0.0
n <- 0
#begin loop for finding initial level of n
while (pow<desired) {
  n <- n+100
  ncp0 <- (n-1)*d*rmsea0^2
  ncpa <- (n-1)*d*rmseaa^2
  #compute power
  if(rmsea0<rmseaa) {
      cval <- qchisq(alpha,d,ncp=ncp0,lower.tail=F)
      pow <- pchisq(cval,d,ncp=ncpa,lower.tail=F)
  }
  else {
      cval <- qchisq(1-alpha,d,ncp=ncp0,lower.tail=F)
      pow <- 1-pchisq(cval,d,ncp=ncpa,lower.tail=F)
  }
}

#begin loop for interval halving
foo <- -1
newn <- n
interval <- 200
powdiff <- pow - desired
while (powdiff>.001) {
  interval <- interval*.5
  newn <- newn + foo*interval*.5
  ncp0 <- (newn-1)*d*rmsea0^2
  ncpa <- (newn-1)*d*rmseaa^2
  #compute power
  if(rmsea0<rmseaa) {
      cval <- qchisq(alpha,d,ncp=ncp0,lower.tail=F)
      pow <- pchisq(cval,d,ncp=ncpa,lower.tail=F)
  }
  else {
      cval <- qchisq(1-alpha,d,ncp=ncp0,lower.tail=F)
      pow <- 1-pchisq(cval,d,ncp=ncpa,lower.tail=F)
  }
  powdiff <- abs(pow-desired)
  if (pow<desired) {
    foo <- 1
  }
  if (pow>desired) {
    foo <- -1
  }
}

minn <- newn
print(minn)

## Recommended  sample per country - 214 to acquire a precise RMSEA between .02 and .08 (cutoff) 
## if an effect truly exists 
## assumption of full data/normality
```

## Monte carlo simulation using ideal samples for sensitivity analysis
## Required per country sample size is 198 with power = .80
## power analysis above with sample size of 214 = .83
## Ideal per country sample size is 500 with power = .99
```{r}
library(pwr)

# Set parameters for the simulation
true_effect_size <- .2
population_sd <- 1
desired_power <- 0.80   # Desired power (e.g., 0.80 for 80% power)
alpha <- 0.05           # Significance level

# Function to perform a single simulation and calculate power
simulate_path_analysis <- function(n) {
  # Generate data with assumed parameters
  x <- rnorm(n, mean = 0, sd = 1)
  error <- rnorm(n, mean = 0, sd = population_sd)
  y <- true_effect_size * x + error
  

  # For illustration purposes, we use pwr.t.test from the 'pwr' package to calculate power
  power <- pwr.t.test(n = n, d = true_effect_size, sig.level = alpha, power = NULL, type = "paired")$power
  
  return(power)
}

# Set the number of simulations
num_simulations <- 1000

# Create a vector to store the power values from each simulation
simulation_results <- numeric(num_simulations)

# Run the Monte Carlo simulations
for (i in 1:num_simulations) {
  simulation_results[i] <- simulate_path_analysis(n = 500)
}

# Calculate the average power across all simulations
average_power <- mean(simulation_results)

# Find the required sample size to achieve the desired power
required_sample_size <- uniroot(function(n) simulate_path_analysis(n) - desired_power, c(10, 10000))$root

# Print the results
cat("Average Power:", round(average_power, 3), "\n")
cat("Required Sample Size:", round(required_sample_size), "\n")

```

## OpenAI API for media text analysis
```{r}
my_API <- "Anon"
```


## Code for RI-CLPM (work in progress - still needs review from MW)
#The model type we use here is Mulder and Hamaker, Ext 3 (three steps), from this page:
#https://doi.org/10.1080/10705511.2020.1784738

## H1 - RLCPM 1
```{r}
# Specify the model
RICLPM1 <- '
    # Create between components (random intercepts)
    SO =~ 1*SO_T1 + 1*SO_T2 + 1*SO_T3
    PPII =~ 1*PPII_T1 + 1*PPII_T2 + 1*PPII_T3
    EA =~ 1*EA_T1 + 1*EA_T2 + 1*EA_T3
    PMAP =~ 1*PMAP_T1 + 1*PMAP_T2 + 1*PMAP_T3
    EI =~ 1*EI_T1 + 1*EI_T2 + 1*EI_T3

  # Create within-person-centered variables
wSO1 =~ 1*SO_T1
wSO2 =~ 1*SO_T2
wSO3 =~ 1*SO_T3
wPPII1 =~ 1*PPII_T1
wPPII2 =~ 1*PPII_T2
wPPII3 =~ 1*PPII_T3
wEA1 =~ 1*EA_T1
wEA2 =~ 1*EA_T2
wEA3 =~ 1*EA_T3
wPMAP1 =~ 1*PMAP_T1
wPMAP2 =~ 1*PMAP_T2
wPMAP3 =~ 1*PMAP_T3
wEI1 =~ 1*EI_T1
wEI2 =~ 1*EI_T2
wEI3 =~ 1*EI_T3

  # Estimate lagged effects between within-person-centered variables and constraining mean effects to be equal
wSO2 ~ ar_x1*wSO1 + ar_x2*wPPII1 + ar_x3*wEA1 + ar_x4*wPMAP1 + cl_x*wEI1
wPPII2 ~ ar_x1*wSO1 + ar_x2*wPPII1 + ar_x3*wEA1 + ar_x4*wPMAP1 + cl_x*wEI1
wEA2 ~ ar_x1*wSO1 + ar_x2*wPPII1 + ar_x3*wEA1 + ar_x4*wPMAP1 + cl_x*wEI1
wPMAP2 ~ ar_x1*wSO1 + ar_x2*wPPII1 + ar_x3*wEA1 + ar_x4*wPMAP1 + cl_x*wEI1
wEI2 ~ cl_y1*wSO1 + cl_y2*wPPII1 + cl_y3*wEA1 + cl_y4*wPMAP1 + ar_y*wEI1
wSO3 ~ ar_x1*wSO2 + ar_x2*wPPII2 + ar_x3*wEA2 + ar_x4*wPMAP2 + cl_x*wEI2
wPPII3 ~ ar_x1*wSO2 + ar_x2*wPPII2 + ar_x3*wEA2 + ar_x4*wPMAP2 + cl_x*wEI2
wEA3 ~ ar_x1*wSO2 + ar_x2*wPPII2 + ar_x3*wEA2 + ar_x4*wPMAP2 + cl_x*wEI2
wPMAP3 ~ ar_x1*wSO2 + ar_x2*wPPII2 + ar_x3*wEA2 + ar_x4*wPMAP2 + cl_x*wEI2
wEI3 ~ cl_y1*wSO2 + cl_y2*wPPII2 + cl_y3*wEA2 + cl_y4*wPMAP2 + ar_y*wEI2

 # Estimate covariance between within-person variables at wave 1
wSO1 ~~ wPPII1
wSO1 ~~ wEA1  
wSO1 ~~ wPMAP1
wSO1 ~~ wEI1
wPPII1 ~~ wEA1
wPPII1 ~~ wPMAP1
wPPII1 ~~ wEI1
wEA1 ~~ wPMAP1
wEA1 ~~ wEI1
wPMAP1 ~~ wEI1

# Estimate covariances between residuals of within-person centered variables waves 2 and 3
wSO2 ~~ wPPII2
wSO2 ~~ wEA2  
wSO2 ~~ wPMAP2
wSO2 ~~ wEI2
wPPII2 ~~ wEA2
wPPII2 ~~ wPMAP2
wPPII2 ~~ wEI2
wEA2 ~~ wPMAP2
wEA2 ~~ wEI2
wPMAP2 ~~ wEI2
wSO3 ~~ wPPII3
wSO3 ~~ wEA3 
wSO3 ~~ wPMAP3
wSO3 ~~ wEI3
wPPII3 ~~ wEA3
wPPII3 ~~ wPMAP3
wPPII3 ~~ wEI3
wEA3 ~~ wPMAP3
wEA3 ~~ wEI3
wPMAP3 ~~ wEI3

  # Estimate variance and covariance of random intercepts
SO ~~ SO
PPII ~~ PPII
EA ~~ EA
PMAP ~~ PMAP
EI ~~ EI
SO ~~ PPII
SO ~~ EA
SO ~~ PMAP
SO ~~ EI
PPII ~~ EA
PPII ~~ PMAP
PPII ~~ EI
EA ~~ PMAP
EA ~~ EI
PMAP ~~ EI

  # Estimate (residual) variance of within-person centered variables
wSO1 ~~ wSO1
wSO2 ~~ wSO2
wSO3 ~~ wSO3
wPPII1 ~~ wPPII1
wPPII2 ~~ wPPII2
wPPII3 ~~ wPPII3
wEA1 ~~ wEA1
wEA2 ~~ wEA2
wEA3 ~~ wEA3
wPMAP1 ~~ wPMAP1
wPMAP2 ~~ wPMAP2
wPMAP3 ~~ wPMAP3
wEI1 ~~ wEI1
wEI2 ~~ wEI2
wEI3 ~~ wEI3
'
# Fit the model
RICLPM1.fit <- lavaan(RICLPM1, data = dat, meanstructure = T, int.ov.free = T, missing = "ML", estimator = "MLR")

# Summarize the results
summary(RICLPM.fit, fit.measures = T, standardized = T)

```

## H2 to 4B - RLCPM 2 and RLCPM 3
```{r}
int_term1 = POL_T1*election_result
int_term2 = POL_T2*election_result
int_term3 = POL_T3*election_result


# Specify the model
RICLPM2 <- '
  # Measurement model
    # Create between components (random intercepts)
 EI =~ 1*EI_T1 + 1*EI_T2 + 1*EI_T3
 POL =~ 1*POL_T1 + 1*POL_T2 + 1*POL_T3
 SJ =~ 1*SJ_T1 + 1*SJ_T2 + 1*SJ_T3
 int_term = 1*int_term1 + 1*int_term2 + 1*int_term3

  # Create within-person-centered variables
wEI1 =~ 1*EI_T1
wEI2 =~ 1*EI_T2
wEI3 =~ 1*EI_T3
wPOL1 =~ 1*POL_T1
wPOL2 =~ 1*POL_T2
wPOL3 =~ 1*POL_T3
wINT_TERM1 =~ 1*int_term1
wINT_TERM2 =~ 1*int_term2
wINT_TERM3 =~ 1*int_term3
wSJ1 =~ 1*SJ_T1
wSJ2 =~ 1*SJ_T2
wSJ3 =~ 1*SJ_T3

 # Estimate lagged effects between within-person-centered variables
wEI2 ~ ar_x1*wEI1 + ar_x2*wPOL1 + ar_x3*wINT_TERM1 + cl_x*wSJ1  
wPOL2 ~ ar_x1*wEI1 + ar_x2*wPOL1 + ar_x3*wINT_TERM1 + cl_x*wSJ1 
wINT_TERM2 ~ ar_x1*wEI1 + ar_x2*wPOL1 + ar_x3*wINT_TERM1+ cl_x*wSJ1 
wSJ2 ~ cl_y1*wEI1 + cl_y2*wPOL1 + cl_y3*wINT_TERM1 + ar_y*wSJ1  
wEI3 ~ ar_x1*wEI2 + ar_x2*wPOL2 + ar_x3*wINT_TERM2 + cl_x*wSJ2 
wPOL3 ~ ar_x1*wEI2 + ar_x2*wPOL2 + ar_x3*wINT_TERM2 + cl_x*wSJ2 
wINT_TERM3 ~ ar_x1*wEI2 + ar_x2*wPOL2 + ar_x3*wINT_TERM2 + cl_x*wSJ2 
wSJ3 ~ cl_y1*wEI2 + cl_y2*wPOL2 +cl_y3*wINT_TERM2 + ar_y*wSJ2 

# Estimate lagged mediation effects between within-person variables
cl_y2 ~ a*cl_y1
cl_y ~ b*cl_x2*cl_y3 + c*cl_y1
# Indirect and total effects
ab:= a*b
total:= ab+c

# Estimate covariance between within-person variables at wave 1
wEI1 ~~ wPOL1
wEI1 ~~ wSJ1  
wPOL1 ~~ wSJ1

# Estimate covariances between residuals of within-person-centered variables (waves 2 & 3)
 wEI2 ~~ wPOL2
wEI2 ~~ wSJ2  
wPOL2 ~~ wSJ2
wEI3 ~~ wPOL3
wEI3 ~~ wSJ3
wPOL3 ~~ wSJ3

 # Estimate (residual) variance of within-person centered variables
wEI1 ~~ wEI1
wEI2 ~~ wEI2
wEI3 ~~ wEI3
wPOL1 ~~ wPOL1
wPOL2 ~~ wPOL2
wPOL3 ~~ wPOL3
wINT_TERM1 ~~ wINT_TERM1
wINT_TERM2 ~~ wINT_TERM2
wINT_TERM3 ~~ wINT_TERM3
wSJ1 ~~ wSJ1
wSJ2 ~~ wSJ2
wSJ3 ~~ wSJ3

# Estimate (residual) variance of random intercepts of endogenous variables
EI ~~ EI
POL ~~ POL
int_term~~int_term
SJ ~~ SJ

 # Define observed variables
EI_T1 + EI_T2 + EI_T3 + POL_T1 + POL_T2 + POL_T3 + int_term1 + int_term2 + int_term3 + SJ_T1 + SJ_T2 + SJ_T3 
'

# Fit the model
RICLPM2.fit <- sem(RICLPM2, data = dat, se = "boot", bootstrap = 1000, estimator = "MLR" ,missing = "ML")

# Summarize the results
summary(RICLPM2.fit, fit = T, standardized = T)

## RLCPM 3

# Specify the model
RICLPM3 <- '
  # Measurement model
    # Create between components (random intercepts)
  EI =~ 1*EI_T1 + 1*EI_T2 + 1*EI_T3
  EA =~ 1*EA_T1 + 1*EA_T2 + 1*EA_T3
  SJ =~ 1*SJ_T1 + 1*SJ_T2 + 1*SJ_T3

 # Create within-person-centered variables
wEI1 =~ 1*EI_T1
wEI2 =~ 1*EI_T2
wEI3 =~ 1*EI_T3
wEA1 =~ 1*EA_T1
wEA2 =~ 1*EA_T2
wEA3 =~ 1*EA_T3
wSJ1 =~ 1*SJ_T1
wSJ2 =~ 1*SJ_T2
wSJ3 =~ 1*SJ_T3

# Estimate lagged effects between within-person-centered variables
wEI2 ~ ar_x1*wEI1 + ar_x2*wEA1 + cl_x*wSJ1
wEA2 ~ ar_x1*wEI1 + ar_x2*wEA1 + cl_x*wSJ1
wSJ2 ~ cl_y1*wEI1 + cl_y2*wEA1 + ar_y*wSJ1
wEI3 ~ ar_x1*wEI2 + ar_x2*wEA2 + cl_x*wSJ2
wEA3 ~ ar_x1*wEI2 + ar_x2*wEA2 + cl_x*wSJ2
wSJ3 ~ cl_y1*wEI2 + cl_y2*wEA2 + ar_y*wSJ2

# Estimate lagged mediation effects between within-person variables 
cl_y2 ~ a*cl_y1
cl_y ~ b*cl_y2 + c*cl_y1
# Indirect and total effects
ab:= a*b
total:= ab+c

# Estimate covariance between within-person variables at wave 1
wEI1 ~~ wEA1
wEI1 ~~ wSJ1  
wEA1 ~~ wSJ1

# Estimate covariances between residuals of within-person-centered variables (wave 2 & 3)
 wEI2 ~~ wEA2
wEI2 ~~ wSJ2  
wEA2 ~~ wSJ2
wEI3 ~~ wEA3
wEI3 ~~ wSJ3
wEA3 ~~ wSJ3

# Estimate (residual) variance of within-person centered variables
wEI1 ~~ wEI1
wEI2 ~~ wEI2
wEI3 ~~ wEI3
wEA1 ~~ wEA1
wEA2 ~~ wEA2
wEA3 ~~ wEA3
wSJ1 ~~ wSJ1
wSJ2 ~~ wSJ2
wSJ3 ~~ wSJ3

# Estimate (residual) variance of random intercepts of endogenous variables
EI ~~ EI
EA ~~ EA
SJ ~~ SJ

 # Define observed variables
 EI_T1 + EI_T2 + EI_T3 + EA_T1 + EA_T2 + EA_T3 + SJ_T1 + SJ_T2 + SJ_T3
'

# Fit the model
RICLPM3.fit <- sem(RICLPM3, data = dat, se = "boot", bootstrap = 1000, missing = "ML", estimator = "MLR")

# Summarize the results
summary(RICLPM3.fit, fit = T, standardized = T)
```

## H5 - RLCPM4
```{r}
# Specify the model
RICLPM4 <- '
  # Measurement model
    # Create between components (random intercepts)
    SJ =~ 1*SJ_T1 + 1*SJ_T2 + 1*SJ_T3
    ST =~ 1*ST_T1 + 1*ST_T2 + 1*ST_T3
    GD =~ 1*GD_T1 + 1*GD_T2 + 1*GD_T3
    GCM =~ 1*GCM_T1 + 1*GCM_T2 + 1*GCM_T3

# Create within-person-centered variables
wSJ1 =~ 1*SJ_T1
wSJ2 =~ 1*SJ_T2
wSJ3 =~ 1*SJ_T3
wST1 =~ 1*ST_T1
wST2 =~ 1*ST_T2
wST3 =~ 1*ST_T3
wGD1 =~ 1*GD_T1
wGD2 =~ 1*GD_T2
wGD3 =~ 1*GD_T3
wGCM1 =~ 1*GCM_T1
wGCM2 =~ 1*GCM_T2
wGCM3 =~ 1*GCM_T3

# Estimate lagged effects between within-person-centered variables
 wSJ2 ~ ar_x1*wSJ1 + ar_y2*wST1 + ar_x3*wGD1 + cl_x*wGCM1
wST2 ~ ar_x1*wSJ1 + ar_y2*wST1 + ar_x3*wGD1 + cl_x*wGCM1
wGD2 ~ ar_x1*wSJ1 + ar_y2*wST1 + ar_x3*wGD1 + cl_x*wGCM1
wGCM2 ~  cl_y1*wSJ1 + cl_y2*wST1 + cl_y3*wGD1 + ar_y*wGCM1
wSJ3 ~ ar_x1*wSJ2 + ar_y2*wST2 + ar_x3*wGD2 + cl_x*wGCM2
wST3 ~ ar_x1*wSJ2 + ar_y2*wST2 + ar_x3*wGD2 + cl_x*wGCM2
wGD3 ~ ar_x1*wSJ2 + ar_y2*wST2 + ar_x3*wGD2 + cl_x*wGCM2
wGCM3 ~  cl_y1*wSJ2 + cl_y2*wST2 + cl_y3*wGD2 + ar_y*wGCM2

## Estimate lagged effect between between-person variables
cl_y2 ~ a*cl_y1
cl_y ~ b*cl_y2 + f*cl_y3  + c*cl_y1
cl_y3 ~ d*cl_y1
## Direct and indirect effects
ab:=a*b
total1:= ab+c
df:=d*f
total2:=df+c

# Estimate covariance between within-person variables at wave 1
wSJ1 ~~ wST1
wSJ1 ~~ wGD1
wSJ1 ~~ wGCM1
wST1 ~~ wGD1
wST1 ~~ wGCM1
wGD1 ~~ wGCM1

# Estimate covariances between residuals of within-person-centered variables (wave 2 & 3)
wSJ2 ~~ wST2
wSJ2 ~~ wGD2
wSJ2 ~~ wGCM2
wST2 ~~ wGD2
wST2 ~~ wGCM2
wGD2 ~~ wGCM2
wSJ3 ~~ wST3
wSJ3 ~~ wGD3
wSJ3 ~~ wGCM3
wST3 ~~ wGD3
wST3 ~~ wGCM3
wGD3 ~~ wGCM3

# Estimate (residual) variance of within-person centered variables
wSJ1 ~~ wSJ1
wSJ2 ~~ wSJ2
wSJ3 ~~ wSJ3
wST1 ~~ wST1
wST2 ~~ wST2
wST3 ~~ wST3
wGD1 ~~ wGD1
wGD2 ~~ wGD2
wGD3 ~~ wGD3
wGCM1 ~~ wGCM1
wGCM2 ~~ wGCM2
wGCM3 ~~ wGCM3

# Estimate (residual) variance of random intercepts of endogenous variables
SJ ~~ SJ
ST ~~ ST
GD ~~ GD
GCM ~~ GCM

# Define observed variables
 SJ_T1 + SJ_T2 + SJ_T3 + ST_T1 + ST_T2 + ST_T3 + GD_T1 + GD_T2 + GD_T3 + GCM_T1 + GCM_T2 + GCM_T3
'

# Fit the model
RICLPM4.fit <- sem(RICLPM4, data = dat, se = "boot", bootstrap = 1000, missing = "ML", estimator = "MLR")

# Summarize the results
summary(RICLPM4.fit, fit = T, standardized = T)
```

## H6 - RLCPM 5
```{r}
int_term1 = GCM_T1*PPMP_T1
int_term2 = GCM_T2*PPMP_T2
int_term3 = GCM_T3*PPMP_T3


# Specify the model
RICLPM5 <- '
    # Create between components (random intercepts)
  GCM =~ 1*GCM_T1 + 1*GCM_T2 + 1*GCM_T3
  CCB =~ 1*CCB_T1 + 1*CCB_T2 + 1*CCB_T3
  PPMP =~ 1*PPMP_T1 + 1*PPMP_T2 + 1*PPMP_T3 
  int_term =~ 1*int_term1 + 1*int_term2 + 1*int_term3

# Create within-person-centered variables including moderation for within differences
wGCM1 =~ 1*GCM_T1
wGCM2 =~ 1*GCM_T2
wGCM3 =~ 1*GCM_T3
wPPMP1 =~ 1*PPMP_T1
wPPMP2 =~ 1*PPMP_T2
wPPMP3 =~ 1*PPMP_T3
wINT_TERM1 =~ 1*int_term1
wINT_TERM2 =~ 1*int_term2
wINT_TERM3 =~ 1*int_term3
wCCB1 =~ 1*CCB_T1
wCCB2 =~ 1*CCB_T2
wCCB3 =~ 1*CCB_T3

# Modify the lagged effects to include the interaction terms
wGCM2 ~ ar_x1*wGCM1 + ar_x2*wPPMP1 + ar_x3*wINT_TERM1 + cl_x*wCCB1
wPPMP2 ~ ar_x1*wGCM1 + ar_x2*wPPMP1 + ar_x3*wINT_TERM1 + cl_x*wCCB1
wINT_TERM2 ~ ar_x1*wGCM1 + ar_x2*wPPMP1 + ar_x3*wINT_TERM1 + cl_x*wCCB1
wCCB2 ~ cl_y1*wGCM1 + ar_y2*wPPMP1 + cl_y3*wINT_TERM1 + ar_y*wCCB1
wGCM3 ~ ar_x1*wGCM2 + ar_x2*wPPMP2 + ar_x3*wINT_TERM2 + cl_x*wCCB2
wPPMP3  ~ ar_x1*wGCM2 + ar_x2*wPPMP2 + ar_x3*wINT_TERM2 + cl_x*wCCB2
wINT_TERM3 ~ ar_x1*wGCM2 + ar_x2*wPPMP2 + ar_x3*wINT_TERM2 + cl_x*wCCB2
wCCB3 ~ cl_y1*wGCM2 + ar_y2*wPPMP2 + cl_y3*wINT_TERM2 + ar_y*wCCB2
 
# Estimate covariance between within-person variables at wave 1
wGCM1 ~~ wCCB1

# Estimate covariances between residuals of within-person-centered variables (wave 2 & 3)
wGCM2 ~~ wCCB2
wGCM3 ~~ wCCB3

# Estimate (residual) variance of within-person centered variables
wGCM1 ~~ wGCM1
wGCM2 ~~ wGCM2
wGCM3 ~~ wGCM3
wPPMP1 ~~ wPPMP1
wPPMP2 ~~ wPPMP2
wPPMP3 ~~ wPPMP3
wINT_TERM1 ~~ wINT_TERM1
wINT_TERM2 ~~ wINT_TERM2
wINT_TERM3 ~~ wINT_TERM3
wCCB1 ~~ wCCB1
wCCB2 ~~ wCCB2
wCCB3 ~~ wCCB3

# Estimate (residual) variance of random intercepts of endogenous variables
GCM ~~ GCM
PPMP ~~ PPMP
int_term ~~ int_term
CCB ~~ CCB
'

# Fit the model
RICLPM5.fit <- lavaan(RICLPM5, data = dat, meanstructure = T, int.ov.free = T, missing = "ML", Estimator = "MLR")

# Summarize the results
summary(RICLPM5.fit, fit.measures = T, standardized = T)
```
summary(RICLPM5.fit, fit.measures = T, standardized = T)
```
